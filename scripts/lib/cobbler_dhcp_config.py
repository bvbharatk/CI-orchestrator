#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1467209868.800118
__CHEETAH_genTimestamp__ = 'Wed Jun 29 10:17:48 2016'
__CHEETAH_src__ = 'dhcp_template'
__CHEETAH_srcLastModified__ = 'Wed Jun 29 10:17:45 2016'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class dhcp_template(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(dhcp_template, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''# ***************************************************************
# Cobbler managed dhcpd.conf file
''')
        write(u'''# generated from cobbler dhcp.conf template ($date)
# Do NOT make changes to /etc/dhcpd.conf. Instead, make your changes
# in /etc/cobbler/dhcp.template, as /etc/dhcpd.conf will be
# overwritten.
''')
        write(u'''# ******************************************************************

ddns-update-style interim;

allow booting;
allow bootp;

ignore client-updates;
set vendorclass = option vendor-class-identifier;

option pxe-system-type code 93 = unsigned integer 16;

subnet ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"subnet",True) # u'$subnet' on line 21, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'$subnet')) # from line 21, col 8.
        write(u''' netmask ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"netmask",True) # u'$netmask' on line 21, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'$netmask')) # from line 21, col 24.
        write(u''' {
     option routers             ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"driver_vm_gateway",True) # u'$driver_vm_gateway' on line 22, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'$driver_vm_gateway')) # from line 22, col 33.
        write(u''';
     option domain-name-servers ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"driver_vm_ip",True) # u'$driver_vm_ip' on line 23, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'$driver_vm_ip')) # from line 23, col 33.
        write(u''';
     option domain-name         "''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"domain",True) # u'$domain' on line 24, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'$domain')) # from line 24, col 34.
        write(u'''";
     option subnet-mask         ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"netmask",True) # u'$netmask' on line 25, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'$netmask')) # from line 25, col 33.
        write(u''';
     #range dynamic-bootp        10.147.28.49  10.147.28.49;
     default-lease-time         21600;
     max-lease-time             43200;
     next-server                $next_server;
     class "pxeclients" {
          match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
          if option pxe-system-type = 00:02 {
                  filename "ia64/elilo.efi";
          } else if option pxe-system-type = 00:06 {
                  filename "grub/grub-x86.efi";
          } else if option pxe-system-type = 00:07 {
                  filename "grub/grub-x86_64.efi";
          } else {
                  filename "pxelinux.0";
          }
     }

}


#for dhcp_tag in $dhcp_tags.keys():
''')
        #  group could be subnet if your dhcp tags line up with your subnets
        #  or really any valid dhcpd.conf construct ... if you only use the
        #  default dhcp tag in cobbler, the group block can be deleted for a
        #  flat configuration
        write(u'''# group for Cobbler DHCP tag: $dhcp_tag
group {
        #for mac in $dhcp_tags[$dhcp_tag].keys():
            #set iface = $dhcp_tags[$dhcp_tag][$mac]
    host $iface.name {
        hardware ethernet $mac;
        #if $iface.ip_address:
        fixed-address $iface.ip_address;
        #end if
        #if $iface.hostname:
        option host-name "$iface.hostname";
        #end if
        #if $iface.netmask:
        option subnet-mask $iface.netmask;
        #end if
        #if $iface.gateway:
        option routers $iface.gateway;
        #end if
        #if $iface.enable_gpxe:
        if exists user-class and option user-class = "gPXE" {
            filename "http://$cobbler_server/cblr/svc/op/gpxe/system/$iface.owner";
        } else if exists user-class and option user-class = "iPXE" {
            filename "http://$cobbler_server/cblr/svc/op/gpxe/system/$iface.owner";
        } else {
            filename "undionly.kpxe";
        }
        #else
        filename "$iface.filename";
        #end if
''')
        #  Cobbler defaults to $next_server, but some users
        #  may like to use $iface.system.server for proxied setups
        write(u'''        next-server $next_server;
''')
        #  next-server $iface.next_server;
        write(u'''    }
        #end for
}
#end for

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_dhcp_template= 'respond'

## END CLASS DEFINITION

if not hasattr(dhcp_template, '_initCheetahAttributes'):
    templateAPIClass = getattr(dhcp_template, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(dhcp_template)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=dhcp_template()).run()


